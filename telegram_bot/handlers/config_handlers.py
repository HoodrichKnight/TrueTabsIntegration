import os
import asyncio
import json
import sys
import time
from datetime import datetime
from typing import Dict, Any, Optional, List # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º List
from pathlib import Path
import validators
import re
import tempfile
import shutil


from aiogram import Router, F, Bot
from aiogram.types import Document
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from ..keyboards import (
    main_menu_keyboard,
    source_selection_keyboard,
    upload_confirm_keyboard,
    select_input_method_keyboard,
    select_config_keyboard,
    operation_in_progress_keyboard
)
from ..utils.rust_executor import execute_rust_command
from ..database import sqlite_db
from .. import config
from ..database.sqlite_db import ( # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î, –≤–∫–ª—é—á–∞—è get_default_*
    add_source_config, get_source_config, list_source_configs, delete_source_config, update_source_config,
    add_tt_config, get_tt_config, list_tt_configs, delete_tt_config, update_tt_config,
    set_default_source_config, get_default_source_config, set_default_tt_config, get_default_tt_config
)


# ... (–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞: REQUIRED_COLUMN_NAMES, PARAM_NAMES_FRIENDLY, get_friendly_param_name, cancel_kb) ...

router = Router()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏/–∏–∑–≤–ª–µ—á–µ–Ω–∏—è
class UploadProcess(StatesGroup):
    select_source = State()
    select_source_input_method = State()
    # select_saved_source_config = State() # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

    # –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é"
    choose_saved_source_method = State()
    choose_saved_tt_method = State()


    waiting_saved_source_selection = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    waiting_saved_tt_selection = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö TT


    waiting_pg_url = State()
    waiting_pg_user = State()
    waiting_pg_pass = State()
    waiting_pg_query = State()

    waiting_mysql_url = State()
    waiting_mysql_user = State()
    waiting_mysql_pass = State()
    waiting_mysql_query = State()

    waiting_sqlite_url = State()
    waiting_sqlite_query = State()

    waiting_redis_url = State()
    waiting_redis_pattern = State()

    waiting_mongodb_uri = State()
    waiting_mongo_db = State()
    waiting_mongo_collection = State()

    waiting_elasticsearch_url = State()
    waiting_elasticsearch_index = State()
    waiting_elasticsearch_query = State()

    waiting_file_upload = State()

    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Labguru –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

    select_tt_input_method = State()
    # select_saved_tt_config = State() # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ


    waiting_upload_token = State()
    waiting_datasheet_id = State()
    waiting_field_map_json = State()

    confirm_parameters = State()
    operation_in_progress = State()


# ... (–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞: SOURCE_PARAMS_ORDER, DISABLED_SOURCES, is_valid_url, is_valid_json) ...

# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data == "select_source", ~StateFilter(ConfigProcess.waiting_config_name, ConfigProcess.waiting_source_config_type, ConfigProcess.waiting_source_param, ConfigProcess.waiting_tt_param)) # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
async def select_source_handler(callback: CallbackQuery, state: FSMContext):
     await state.set_state(UploadProcess.select_source)
     await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=source_selection_keyboard())
     await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data.startswith("start_upload_process:"))
async def start_upload_process(callback: CallbackQuery, state: FSMContext):
    source_type = callback.data.split(":")[1]

    if source_type in DISABLED_SOURCES:
        await callback.message.edit_text(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö '{source_type}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await callback.answer()
        return

    await state.update_data(selected_source_type=source_type, source_params={})

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    await state.set_state(UploadProcess.select_source_input_method)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: <b>{source_type.capitalize()}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:",
        reply_markup=select_input_method_keyboard('source'), # –ø–µ—Ä–µ–¥–∞–µ–º 'source' –¥–ª—è callback_data
        parse_mode='HTML'
    )
    await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω) ---
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç select_input_method:manual:source –∏ select_input_method:saved:source
@router.callback_query(F.data.startswith("select_input_method:"), UploadProcess.select_source_input_method)
async def select_source_input_method(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    method = parts[1] # 'manual' –∏–ª–∏ 'saved'
    config_type_from_callback = parts[2] # 'source' –∏–ª–∏ 'tt'

    state_data = await state.get_data()
    source_type = state_data.get("selected_source_type") # –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ state

    if config_type_from_callback != 'source' or not source_type:
         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ callback_data –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ
         await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard())
         await state.clear()
         await callback.answer()
         return


    if method == 'manual':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        params_order = SOURCE_PARAMS_ORDER.get(source_type, [])
        params_order = [p for p in params_order if p != "source_type"]

        if not params_order:
            await state.update_data(source_params={})
            await state.set_state(UploadProcess.select_tt_input_method)
            await callback.message.edit_text(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è <b>{source_type.capitalize()}</b> –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs:",
                                             reply_markup=select_input_method_keyboard('tt'),
                                             parse_mode='HTML')
            await callback.answer()
            return

        first_param_key = params_order[0]
        initial_state = None

        if source_type == 'postgres': initial_state = UploadProcess.waiting_pg_url
        elif source_type == 'mysql': initial_state = UploadProcess.waiting_mysql_url
        elif source_type == 'sqlite': initial_state = UploadProcess.waiting_sqlite_url
        elif source_type == 'redis': initial_state = UploadProcess.waiting_redis_url
        elif source_type == 'mongodb': initial_state = UploadProcess.waiting_mongodb_uri
        elif source_type == 'elasticsearch': initial_state = UploadProcess.waiting_elasticsearch_url
        elif source_type in ['csv', 'excel']: initial_state = UploadProcess.waiting_file_upload
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if initial_state:
            await state.update_data(param_keys_order=params_order, current_param_index=0)
            await state.set_state(initial_state)
            friendly_name = get_friendly_param_name(first_param_key)
            await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ {friendly_name}:", reply_markup=cancel_kb)
        else:
             await callback.message.edit_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_type}'. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard())
             await state.clear()

        await callback.answer()

    elif method == 'saved':
        # --- –õ–û–ì–ò–ö–ê –î–õ–Ø "–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –°–û–•–†–ê–ù–ï–ù–ù–£–Æ" ---
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        default_config = await sqlite_db.get_default_source_config(source_type)

        if default_config:
            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            builder = InlineKeyboardBuilder()
            builder.row(
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                InlineKeyboardButton(text=f"üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}", callback_data=f"use_default_source_config:{default_config.get('name', 'N/A')}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            )
            builder.row(
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="list_saved_source_configs_for_selection") # –ù–æ–≤—ã–π callback
            )
            builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")) # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            keyboard = builder.as_markup()

            text = f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ <b>{source_type.capitalize()}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥–∏
            await state.set_state(UploadProcess.choose_saved_source_method)

        else:
            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
            text = "–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:"
            source_configs = await sqlite_db.list_source_configs() # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤

            if not source_configs:
                await callback.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.", reply_markup=select_input_method_keyboard('source'))
                await state.set_state(UploadProcess.select_source_input_method) # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            else:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = select_config_keyboard(source_configs, 'source_select')
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                await state.set_state(UploadProcess.waiting_saved_source_selection) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


        await callback.answer()

    else:
        await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞.", reply_markup=main_menu_keyboard())
        await state.clear()
        await callback.answer()


# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–†: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–µ—Ñ–æ–ª—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫) ---
@router.callback_query(F.data.startswith("use_default_source_config:"), UploadProcess.choose_saved_source_method)
async def use_default_source_config_handler(callback: CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    config_name = callback.data.split(":")[1]
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    default_config = await sqlite_db.get_source_config(config_name)

    if default_config:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(selected_source_type=default_config.get('source_type'), source_params=default_config)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs
        await state.set_state(UploadProcess.select_tt_input_method)
        await callback.message.edit_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{default_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({default_config.get('source_type')}).\n"
                                         f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs:",
                                         reply_markup=select_input_method_keyboard('tt'),
                                         parse_mode='HTML')

    else:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏?), —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await state.clear()

    await callback.answer()


@router.callback_query(F.data == "list_saved_source_configs_for_selection", UploadProcess.choose_saved_source_method)
async def list_all_source_configs_for_selection(callback: CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞:"
    source_configs = await sqlite_db.list_source_configs() # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤

    if not source_configs:
         # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (—É–¥–∞–ª–µ–Ω—ã?), —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
         await callback.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=select_input_method_keyboard('source'))
         await state.set_state(UploadProcess.select_source_input_method) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = select_config_keyboard(source_configs, 'source_select')
        await callback.message.edit_text(text, reply_markup=keyboard)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        await state.set_state(UploadProcess.waiting_saved_source_selection) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∏–∑ —Å–ø–∏—Å–∫–∞) ---
# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UploadProcess.waiting_saved_source_selection
@router.callback_query(F.data.startswith("select_config:source_select:"), UploadProcess.waiting_saved_source_selection)
async def process_saved_source_config_selection(callback: CallbackQuery, state: FSMContext):
    config_name = callback.data.split(":")[2]
    saved_config = await sqlite_db.get_source_config(config_name)

    if saved_config:
        await state.update_data(selected_source_type=saved_config.get('source_type'), source_params=saved_config)

        await state.set_state(UploadProcess.select_tt_input_method)
        await callback.message.edit_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: <b>{saved_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({saved_config.get('source_type')}).\n"
                                         f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs:",
                                         reply_markup=select_input_method_keyboard('tt'),
                                         parse_mode='HTML')

    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await state.clear()

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(F.document, UploadProcess.waiting_file_upload)
async def process_uploaded_file(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    state_data = await state.get_data()
    source_type = state_data['selected_source_type']
    original_file_name = message.document.file_name

    allowed_extensions = {
        'csv': ['.csv'],
        'excel': ['.xlsx', '.xls'],
    }
    expected_extensions = allowed_extensions.get(source_type, [])
    file_extension = Path(original_file_name).suffix.lower()

    if not expected_extensions or file_extension not in expected_extensions:
         friendly_name = get_friendly_param_name(source_type)
         await message.answer(f"–û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ {', '.join(expected_extensions)} –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{friendly_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")
         return

    temp_dir = None
    temp_file_path = None

    try:
        temp_dir = tempfile.mkdtemp(prefix=f"tt_upload_{message.from_user.id}_")
        temp_file_path = Path(temp_dir) / original_file_name

        file_info = await bot.get_file(message.document.file_id)
        await bot.download_file(file_info.file_path, temp_file_path)

        print(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å: {temp_file_path}")

        await state.update_data(
            source_params={'source_url': str(temp_file_path)},
            temp_file_upload_dir=temp_dir
        )

        await state.set_state(UploadProcess.select_tt_input_method)

        await message.answer(f"–§–∞–π–ª '{original_file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs:",
                             reply_markup=select_input_method_keyboard('tt'))


    except TelegramBadRequest as e:
        print(f"Telegram API error downloading file: {e}", file=sys.stderr)
        if temp_dir and os.path.exists(temp_dir):
             try: shutil.rmtree(temp_dir)
             except Exception as cleanup_e: print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ temp dir {temp_dir} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {cleanup_e}", file=sys.stderr)

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
    except Exception as e:
        print(f"Error processing uploaded file: {e}", file=sys.stderr)
        if temp_dir and os.path.exists(temp_dir):
             try: shutil.rmtree(temp_dir)
             except Exception as cleanup_e: print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ temp dir {temp_dir} –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏: {cleanup_e}", file=sys.stderr)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        await state.clear()


# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ True Tabs (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω) ---
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç select_input_method:manual:tt –∏ select_input_method:saved:tt
@router.callback_query(F.data.startswith("select_input_method:"), UploadProcess.select_tt_input_method)
async def select_tt_input_method(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    method = parts[1] # 'manual' –∏–ª–∏ 'saved'
    config_type_from_callback = parts[2] # 'source' –∏–ª–∏ 'tt'

    state_data = await state.get_data()
    # selected_source_type –∏ source_params —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ state

    if config_type_from_callback != 'tt':
         await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard())
         await state.clear()
         await callback.answer()
         return


    if method == 'manual':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TT –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        await state.set_state(UploadProcess.waiting_upload_token)
        tt_params={}
        await state.update_data(tt_params=tt_params)
        tt_params_order = ["upload_api_token", "upload_datasheet_id", "upload_field_map_json"]
        await state.update_data(tt_params_order=tt_params_order, current_tt_param_index=0)

        first_param_key = tt_params_order[0]
        friendly_name = get_friendly_param_name(first_param_key)
        await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ {friendly_name}:", reply_markup=cancel_kb)
        await callback.answer()

    elif method == 'saved':
        # --- –õ–û–ì–ò–ö–ê –î–õ–Ø "–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –°–û–•–†–ê–ù–ï–ù–ù–£–Æ" ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ True Tabs
        default_config = await sqlite_db.get_default_tt_config()

        if default_config:
            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            builder = InlineKeyboardBuilder()
            builder.row(
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                InlineKeyboardButton(text=f"üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}", callback_data=f"use_default_tt_config:{default_config.get('name', 'N/A')}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            )
            builder.row(
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="list_saved_tt_configs_for_selection") # –ù–æ–≤—ã–π callback
            )
            builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")) # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            keyboard = builder.as_markup()

            text = f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥–∏
            await state.set_state(UploadProcess.choose_saved_tt_method)

        else:
            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
            text = "–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é True Tabs –∏–∑ —Å–ø–∏—Å–∫–∞:"
            tt_configs = await sqlite_db.list_tt_configs() # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤

            if not tt_configs:
                 await callback.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π True Tabs –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.", reply_markup=select_input_method_keyboard('tt'))
                 await state.set_state(UploadProcess.select_tt_input_method) # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            else:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = select_config_keyboard(tt_configs, 'tt_select')
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                await state.set_state(UploadProcess.waiting_saved_tt_selection) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


        await callback.answer()

    else:
        await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞.", reply_markup=main_menu_keyboard())
        await state.clear()
        await callback.answer()

# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–†: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ True Tabs (–¥–µ—Ñ–æ–ª—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫) ---
@router.callback_query(F.data.startswith("use_default_tt_config:"), UploadProcess.choose_saved_tt_method)
async def use_default_tt_config_handler(callback: CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    config_name = callback.data.split(":")[1]
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    default_config = await sqlite_db.get_tt_config(config_name)

    if default_config:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ True Tabs –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(tt_params={
            "upload_api_token": default_config.get("upload_api_token"),
            "upload_datasheet_id": default_config.get("upload_datasheet_id"),
            "upload_field_map_json": default_config.get("upload_field_map_json"),
        })

        # –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏—Å—Ç–æ—á–Ω–∏–∫ –∏ TT) —Å–æ–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.set_state(UploadProcess.confirm_parameters)
        state_data = await state.get_data()
        source_params = state_data.get('source_params', {})
        tt_params = state_data.get('tt_params', {})
        confirm_text = build_confirmation_message(state_data.get('selected_source_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), source_params, tt_params)

        await callback.message.edit_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{default_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>.\n"
                                         f"–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'.\n\n" + confirm_text,
                                         reply_markup=upload_confirm_keyboard(),
                                         parse_mode='HTML')

    else:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "list_saved_tt_configs_for_selection", UploadProcess.choose_saved_tt_method)
async def list_all_tt_configs_for_selection(callback: CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é True Tabs:"
    tt_configs = await sqlite_db.list_tt_configs() # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤

    if not tt_configs:
         # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
         await callback.message.edit_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π True Tabs –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=select_input_method_keyboard('tt'))
         await state.set_state(UploadProcess.select_tt_input_method) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = select_config_keyboard(tt_configs, 'tt_select')
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML') # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ HTML –≤–∫–ª—é—á–µ–Ω
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        await state.set_state(UploadProcess.waiting_saved_tt_selection) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ True Tabs (–∏–∑ —Å–ø–∏—Å–∫–∞) ---
# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UploadProcess.waiting_saved_tt_selection
@router.callback_query(F.data.startswith("select_config:tt_select:"), UploadProcess.waiting_saved_tt_selection)
async def process_saved_tt_config_selection(callback: CallbackQuery, state: FSMContext):
    config_name = callback.data.split(":")[2]
    saved_config = await sqlite_db.get_tt_config(config_name)

    if saved_config:
        await state.update_data(tt_params={
            "upload_api_token": saved_config.get("upload_api_token"),
            "upload_datasheet_id": saved_config.get("upload_datasheet_id"),
            "upload_field_map_json": saved_config.get("upload_field_map_json"),
        })

        await state.set_state(UploadProcess.confirm_parameters)
        state_data = await state.get_data()
        source_params = state_data.get('source_params', {})
        tt_params = state_data.get('tt_params', {})
        confirm_text = build_confirmation_message(state_data.get('selected_source_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), source_params, tt_params)

        await callback.message.edit_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs: <b>{saved_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>.\n"
                                         f"–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'.\n\n" + confirm_text,
                                         reply_markup=upload_confirm_keyboard(),
                                         parse_mode='HTML')

    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è True Tabs '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await state.clear()

    await callback.answer()


# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TT - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def build_confirmation_message(source_type: str, source_params: Dict[str, Any], tt_params: Dict[str, Any]) -> str:
    confirm_text = f"<b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n\n"
    confirm_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: <b>{source_type}</b>\n"

    source_param_order = SOURCE_PARAMS_ORDER.get(source_type, [])
    if 'source_type' not in source_param_order:
         source_param_order = ['source_type'] + [p for p in source_param_order if p != 'source_type']


    for key in source_param_order:
         value = source_params.get(key)
         if value is not None:
              friendly_key = get_friendly_param_name(key)
              if key in ['source_pass', 'neo4j_pass', 'couchbase_pass', 'upload_api_token']:
                  confirm_text += f"  {friendly_key.capitalize()}: <code>***</code>\n"
              elif key in ['source_url', 'cassandra_addresses', 'neo4j_uri', 'couchbase_cluster_url'] and source_type not in ['excel', 'csv']:
                   confirm_text += f"  {friendly_key.capitalize()}: <code>{value}</code>\n"
              elif key == 'source_url' and source_type in ['excel', 'csv']:
                  confirm_text += f"  {get_friendly_param_name('source_url_file').capitalize()}: <code>{value}</code>\n"
              elif key in ['es_query', 'specific_params'] and isinstance(value, (str, dict)):
                  try:
                       value_to_dump = value if isinstance(value, dict) else json.loads(value)
                       query_display = json.dumps(value_to_dump, indent=2, ensure_ascii=False)
                       confirm_text += f"  {friendly_key.capitalize()}:\n<pre><code class=\"language-json\">{query_display}</code></pre>\n"
                  except:
                       confirm_text += f"  {friendly_key.capitalize()}: <code>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</code>\n"
              else:
                 confirm_text += f"  {friendly_key.capitalize()}: <code>{value}</code>\n"


    confirm_text += f"\n<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã True Tabs:</b>\n"
    tt_param_order = ["upload_api_token", "upload_datasheet_id", "upload_field_map_json"]
    for key in tt_param_order:
         value = tt_params.get(key)
         if value is not None:
              friendly_key = get_friendly_param_name(key)
              if key == 'upload_api_token':
                  confirm_text += f"  {friendly_key.capitalize()}: <code>***</code>\n"
              elif key == 'upload_field_map_json':
                  try:
                      field_map_display = json.dumps(json.loads(value), indent=2, ensure_ascii=False)
                      confirm_text += f"  {get_friendly_param_name('upload_field_map_json_display').capitalize()}:\n<pre><code class=\"language-json\">{field_map_display}</code></pre>\n"
                  except:
                      confirm_text += f"  {friendly_key.capitalize()}: <code>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</code>\n"
              else:
                 confirm_text += f"  {friendly_key.capitalize()}: <code>{value}</code>\n"


    confirm_text += f"\n–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."
    return confirm_text


# --- –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data == "confirm_upload", StateFilter(UploadProcess.confirm_parameters))
async def handle_confirm_upload(callback: CallbackQuery, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    source_type = state_data.get("selected_source_type", "unknown")
    source_params = state_data.get("source_params", {})
    tt_params = state_data.get("tt_params", {})
    temp_upload_dir = state_data.get('temp_file_upload_dir')


    # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å action ('extract', 'update')
    rust_action = "extract"

    output_filename = f"extract_result_{callback.from_user.id}_{source_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    output_filepath = Path(config.TEMP_FILES_DIR) / output_filename


    rust_args = []
    rust_args.append("--action")
    rust_args.append(rust_action)

    rust_args.append("--source")
    rust_args.append(source_type)

    rust_arg_map = {
         'source_url': '--connection',
         'source_user': '--user', 'source_pass': '--pass',
         'source_query': '--query',
         'db_name': '--db-name', 'collection_name': '--collection',
         'key_pattern': '--key-pattern',
         'org': '--org', 'bucket': '--bucket', 'index': '--index',
         'es_query': '--query',
         'redis_pattern': '--key-pattern',
         'mongo_db': '--db-name',
         'mongo_collection': '--collection',
         'specific_params': '--specific-params-json',
         'cassandra_addresses': '--connection', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ Cassandra
         'neo4j_uri': '--connection', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è URI Neo4j
         'couchbase_cluster_url': '--connection', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è URL Couchbase
         'neo4j_user': '--user', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Neo4j
         'neo4j_pass': '--pass', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–∞—Ä–æ–ª—è Neo4j
         'couchbase_user': '--user', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Couchbase
         'couchbase_pass': '--pass', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–∞—Ä–æ–ª—è Couchbase
         'couchbase_bucket': '--bucket', # –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –±–∞–∫–µ—Ç–∞ Couchbase

    }

    for key, value in source_params.items():
        if value is None or value == "" or key not in rust_arg_map or key in ['source_type', 'name']:
            continue

        rust_arg_name = rust_arg_map[key]

        if key in ['es_query', 'specific_params']:
            if isinstance(value, dict):
                 value_to_dump = value
            elif isinstance(value, str):
                 try:
                      value_to_dump = json.loads(value)
                 except json.JSONDecodeError:
                      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ Rust: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON string –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {key}.", file=sys.stderr)
                      await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{get_friendly_param_name(key)}'. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_keyboard())
                      await state.clear()
                      await callback.answer()
                      return
            else:
                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ Rust: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø ({type(value)}) –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {key}.", file=sys.stderr)
                 await callback.message.edit_text(f"–û—à–∏–±–∫–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{get_friendly_param_name(key)}'. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_keyboard())
                 await state.clear()
                 await callback.answer()
                 return

            rust_args.append(rust_arg_name)
            rust_args.append(json.dumps(value_to_dump))

        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Cassandra addresses, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π "host1,host2"
        elif key == 'cassandra_addresses' and source_type == 'cassandra':
             # Rust –æ–∂–∏–¥–∞–µ—Ç --connection host1 --connection host2 ... –∏–ª–∏ –æ–¥–∏–Ω --connection —Å —Ö–æ—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
             # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Rust –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω --connection —Å –∞–¥—Ä–µ—Å–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
             # –ï—Å–ª–∏ Rust –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —ç—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
             if isinstance(value, str) and value:
                  rust_args.append(rust_arg_name)
                  rust_args.append(value) # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–æ–≤ –∫–∞–∫ –µ—Å—Ç—å
             elif isinstance(value, list) and value:
                  rust_args.append(rust_arg_name)
                  rust_args.append(','.join(value)) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
             # –ï—Å–ª–∏ value None –∏–ª–∏ –ø—É—Å—Ç–æ–µ, –æ–Ω–æ —É–∂–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞

        else:
            rust_args.append(rust_arg_name)
            rust_args.append(str(value))


    expected_headers_from_state = state_data.get('expected_headers')
    if expected_headers_from_state:
        try:
             rust_args.append("--expected-headers")
             rust_args.append(json.dumps(expected_headers_from_state))
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ expected_headers –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã Rust: {e}", file=sys.stderr)
             await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_keyboard())
             await state.clear()
             await callback.answer()
             return

    rust_args.append("--output-xlsx-path")
    rust_args.append(str(output_filepath))


    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.set_state(UploadProcess.operation_in_progress)

    starting_message = await callback.message.edit_text(
        "–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏...",
        reply_markup=operation_in_progress_keyboard()
    )
    await callback.answer()

    asyncio.create_task(process_upload_task(
        bot,
        callback.message.chat.id,
        rust_args,
        source_type,
        tt_params.get("upload_datasheet_id", "N/A"),
        str(output_filepath),
        temp_upload_dir,
        starting_message,
        state,
    ))

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π FSM –ª–æ–≥–∏–∫–∏) ---
async def process_upload_task(
    bot: Bot, chat_id: int, rust_args: list, source_type: str, datasheet_id: str,
    output_filepath: str, temp_upload_dir: str, message: Message, state: FSMContext):

    process = None
    communicate_future = None
    execution_info = None
    final_status = "ERROR"
    final_message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
    duration = 0.0
    extracted_rows = None
    uploaded_records = None
    datasheet_id_from_result = datasheet_id
    final_file_path = None
    error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    start_time = time.time()

    try:
        execution_info = await execute_rust_command(rust_args)

        if execution_info["status"] == "ERROR":
            final_status = "ERROR"
            error_message = execution_info.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ Rust.")
            duration = execution_info.get("duration_seconds", time.time() - start_time)
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Rust –ø—Ä–æ—Ü–µ—Å—Å–∞: {error_message}", file=sys.stderr)
        else:
            process = execution_info["process"]
            communicate_future = execution_info["communicate_future"]
            start_time = execution_info["start_time"]
            command_string = execution_info["command_string"]

            await state.update_data(
                running_process_pid=process.pid,
                running_process_command=command_string,
                running_process_future=communicate_future,
                running_process_object=process,
                process_start_time=start_time
            )

            print(f"Rust process PID: {process.pid} started.", file=sys.stderr)

            try:
                stdout_data, stderr_data = await communicate_future
                end_time = time.time()
                duration = end_time - start_time

                stdout_str = stdout_data.decode('utf-8', errors='ignore')
                stderr_str = stderr_data.decode('utf-8', errors='ignore')

                print(f"Rust stdout (PID {process.pid}):\n{stdout_str}", file=sys.stderr)
                print(f"Rust stderr (PID {process.pid}):\n{stderr_str}", file=sys.stderr)
                print(f"Rust –ø—Ä–æ—Ü–µ—Å—Å PID {process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {process.returncode}", file=sys.stderr)

                try:
                    json_result: Dict[str, Any] = json.loads(stdout_str)
                    final_status = json_result.get("status", "ERROR")
                    error_message = json_result.get("message", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Ç–∏–ª–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                    extracted_rows = json_result.get("extracted_rows")
                    uploaded_records = json_result.get("uploaded_records")
                    datasheet_id_from_result = json_result.get("datasheet_id", datasheet_id_from_result)
                    final_file_path = json_result.get("file_path")

                    if final_status == "SUCCESS" and error_message == "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Ç–∏–ª–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.":
                         error_message = "Operation completed successfully."


                except json.JSONDecodeError:
                    final_status = "ERROR"
                    error_message = f"Rust –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}, –Ω–æ stdout –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON. Stderr:\n{stderr_str}\nStdout:\n{stdout_str}"
                except Exception as e:
                     final_status = "ERROR"
                     error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Rust: {e}. Stderr:\n{stderr_str}\nStdout:\n{stdout_str}"

                if final_status != "SUCCESS" and process.returncode != 0:
                     if error_message == "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Ç–∏–ª–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç." or \
                        error_message.startswith("Rust –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º"):
                           error_message = f"Rust –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {process.returncode}). Stderr:\n{stderr_str}\nStdout:\n{stdout_str}"
                     final_status = "ERROR"


            except asyncio.CancelledError:
                print(f"–ó–∞–¥–∞—á–∞ Communicate –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è PID {process.pid}", file=sys.stderr)
                final_status = "CANCELLED"
                error_message = "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                duration = time.time() - start_time

            except Exception as e:
                final_status = "ERROR"
                error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Rust –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}"
                duration = time.time() - start_time
                print(f"Unexpected error during Rust process execution: {e}", file=sys.stderr)


    except Exception as e:
        final_status = "ERROR"
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}"
        duration = time.time() - start_time
        print(f"Unexpected error in process_upload_task (outer): {e}", file=sys.stderr)


    finally:
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ process_upload_task –¥–ª—è PID {process.pid if process else 'N/A'} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {final_status}", file=sys.stderr)
        await state.update_data(
             running_process_pid=None,
             running_process_command=None,
             running_process_future=None,
             running_process_object=None,
             process_start_time=None
        )
        await state.clear()


        if temp_upload_dir and os.path.exists(temp_upload_dir):
            try:
                shutil.rmtree(temp_upload_dir)
                print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_upload_dir} —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_upload_dir}: {e}", file=sys.stderr)

        try:
             await sqlite_db.add_upload_record(
                 source_type=source_type,
                 status=final_status,
                 file_path=final_file_path,
                 error_message=error_message,
                 true_tabs_datasheet_id=datasheet_id_from_result,
                 duration_seconds=duration
             )
             print(f"–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {final_status}", file=sys.stderr)
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", file=sys.stderr)
             try:
                 await bot.send_message(chat_id, f"‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{final_status}', –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}", parse_mode='HTML')
             except Exception as send_e:
                  print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {send_e}", file=sys.stderr)


        try:
            final_message_text = f"‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n" if final_status == "SUCCESS" else \
                                 f"‚ö†Ô∏è <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n" if final_status == "CANCELLED" else \
                                 f"‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!</b>\n"

            final_message_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{source_type}</code>\n"
            if datasheet_id_from_result and datasheet_id_from_result != 'N/A':
                final_message_text += f"Datasheet ID: <code>{datasheet_id_from_result}</code>\n"

            if final_status == "SUCCESS":
                if extracted_rows is not None:
                     final_message_text += f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {extracted_rows}\n"
                if uploaded_records is not None:
                     final_message_text += f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {uploaded_records}\n"
                final_message_text += f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥\n"
                if final_file_path:
                     final_message_text += f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–æ—Ç–∞: <code>{final_file_path}</code>"
                if error_message != "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Ç–∏–ª–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç." and error_message != "Operation completed successfully.":
                    final_message_text += f"\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Ç–∏–ª–∏—Ç—ã:</i> {error_message}"

                await message.edit_text(final_message_text, parse_mode='HTML', reply_markup=main_menu_keyboard())

                if final_file_path and os.path.exists(final_file_path):
                     try:
                         await bot.send_document(chat_id, document= FSInputFile(final_file_path, filename=os.path.basename(final_file_path)))
                     except Exception as e:
                          print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}", file=sys.stderr)
                          await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

            elif final_status == "CANCELLED":
                 final_message_text += f"–í—Ä–µ–º—è –¥–æ –æ—Ç–º–µ–Ω—ã: {duration:.2f} —Å–µ–∫—É–Ω–¥\n"
                 final_message_text += f"–ü—Ä–∏—á–∏–Ω–∞: {error_message}"

                 await message.edit_text(final_message_text, parse_mode='HTML', reply_markup=main_menu_keyboard())

            else:
                if extracted_rows is not None:
                     final_message_text += f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ (–¥–æ –æ—à–∏–±–∫–∏): {extracted_rows}\n"
                if uploaded_records is not None:
                     final_message_text += f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π (–¥–æ –æ—à–∏–±–∫–∏): {uploaded_records}\n"
                final_message_text += f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥\n\n"

                final_message_text += error_message

                await message.edit_text(final_message_text, parse_mode='HTML', reply_markup=main_menu_keyboard())

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", file=sys.stderr)
            try:
                await bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}", parse_mode='HTML')
            except Exception as send_e:
                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_e}", file=sys.stderr)


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data == "cancel_operation", StateFilter(UploadProcess.operation_in_progress))
async def handle_cancel_operation(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    stored_process: Optional[asyncio.subprocess.Process] = state_data.get("running_process_object")
    process_future: Optional[asyncio.Task] = state_data.get("running_process_future")
    process_pid = state_data.get("running_process_pid")

    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

    if stored_process and stored_process.returncode is None:
         print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏ PID: {process_pid}", file=sys.stderr)
         try:
             stored_process.terminate()
             if process_future and not process_future.done():
                  process_future.cancel()
         except ProcessLookupError:
              print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID {process_pid}, –Ω–æ –æ–Ω —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.", file=sys.stderr)
         except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID {process_pid}: {e}", file=sys.stderr)
             try:
                  await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
             except Exception as send_e:
                  print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ—Ç–º–µ–Ω—ã: {send_e}", file=sys.stderr)
    elif stored_process and stored_process.returncode is not None:
        print(f"–û—Ç–º–µ–Ω–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å PID {process_pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {stored_process.returncode}", file=sys.stderr)
        try:
            await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}", file=sys.stderr)

    else:
        print("–û—Ç–º–µ–Ω–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", file=sys.stderr)
        await state.clear()
        try:
             await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.", reply_markup=main_menu_keyboard())
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", file=sys.stderr)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
])

# --- –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã FSM (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data == "cancel")
async def cancel_fsm(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    if current_state == UploadProcess.operation_in_progress:
        await handle_cancel_operation(callback, state)
    else:
        await state.clear()
        await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await callback.answer()