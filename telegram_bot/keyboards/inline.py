from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any

def main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="select_source")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫", callback_data="view_history:0")
    )
    builder.row(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="manage_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def source_selection_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    sources = [
        ("PostgreSQL", "postgres"), ("MySQL", "mysql"), ("SQLite", "sqlite"), ("MSSQL", "mssql"),
        ("MongoDB", "mongodb"), ("Redis", "redis"), ("Cassandra/ScyllaDB", "cassandra"),
        ("ClickHouse", "clickhouse"), ("InfluxDB", "influxdb"), ("Elasticsearch", "elasticsearch"),
        ("Excel —Ñ–∞–π–ª", "excel"), ("CSV —Ñ–∞–π–ª", "csv"),
        ("Neo4j", "neo4j"), ("Couchbase", "couchbase"),
    ]
    for text, source_type in sources:
        builder.button(text=text, callback_data=f"select_source:{source_type}")

    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def history_pagination_keyboard(current_offset: int, total_records: int, limit: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    prev_offset = max(0, current_offset - limit)
    next_offset = current_offset + limit
    has_prev = current_offset > 0
    has_next = next_offset < total_records

    if has_prev:
        builder.button(text="‚¨ÖÔ∏è", callback_data=f"view_history:{prev_offset}")
    current_page_end = min(current_offset + limit, total_records)
    builder.button(text=f"{current_offset + 1}-{current_page_end} –∏–∑ {total_records}", callback_data="ignore")

    if has_next:
        builder.button(text="‚û°Ô∏è", callback_data=f"view_history:{next_offset}")

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))

    return builder.as_markup()

def upload_confirm_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="confirm_upload"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def manage_configs_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="manage_source_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚úÖ True Tabs", callback_data="manage_tt_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return builder.as_markup()

def manage_source_configs_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_source_config")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="list_source_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_configs") # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
    )
    return builder.as_markup()

def manage_tt_configs_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_tt_config")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="list_tt_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_configs") # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
    )
    return builder.as_markup()

def list_configs_keyboard(configs: List[Dict[str, Any]], config_type: str, offset: int = 0, limit: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not configs:
        builder.row(InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", callback_data="ignore"))
    else:
        for config in configs:
            if config_type == 'source':
                 text = f"{config['name']} ({config['source_type']})"
                 callback_prefix = "source_config"
            elif config_type == 'tt':
                 text = f"{config['name']} (Datasheet ID: {config['upload_datasheet_id']})"
                 callback_prefix = "tt_config"
            else:
                 text = config['name']
                 callback_prefix = "config"

            builder.row(InlineKeyboardButton(text=text, callback_data=f"{callback_prefix}_actions:{config['name']}"))

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–ø–∏—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –±–æ–ª—å—à–∏–º–∏

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_{config_type}_configs"))

    return builder.as_markup()

def config_actions_keyboard(config_name: str, config_type: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # TODO: –ö–Ω–æ–ø–∫–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∑–∫–∏)
    # builder.row(InlineKeyboardButton(text="üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", callback_data=f"use_{config_type}_config:{config_name}"))
    # TODO: –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" (—Å–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    # builder.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{config_type}_config:{config_name}"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_type}_config_confirm:{config_name}")) # –®–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_{config_type}_configs")) # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
    return builder.as_markup()


def delete_confirm_keyboard(config_name: str, config_type: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"delete_{config_type}_config:{config_name}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{config_type}_actions:{config_name}") # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    )
    return builder.as_markup()