from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any, Optional

def main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="select_source")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫", callback_data="view_history:0")
    )
    builder.row(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="manage_configs")
    )
    # –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–µ –Ω—É–∂–Ω–∞, –æ–Ω–∞ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ–ª–æ—É
    # builder.row(
    #     InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    # )
    return builder.as_markup()

def source_selection_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –£–±—Ä–∞–Ω—ã Labguru, Cassandra, Neo4j, Couchbase
    sources = [
        ("PostgreSQL", "postgres"), ("MySQL", "mysql"), ("SQLite", "sqlite"),
        ("MongoDB", "mongodb"), ("Redis", "redis"), ("Elasticsearch", "elasticsearch"),
        ("CSV —Ñ–∞–π–ª", "csv"), ("Excel —Ñ–∞–π–ª", "excel"),
        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
        # ("Labguru", "labguru"),
        # ("Cassandra", "cassandra"),
        # ("Neo4j", "neo4j"),
        # ("Couchbase", "couchbase"),
    ]
    for text, source_type in sources:
        builder.button(text=text, callback_data=f"start_upload_process:{source_type}")

    builder.adjust(2) # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def history_pagination_keyboard(current_offset: int, total_records: int, limit: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    prev_offset = max(0, current_offset - limit)
    next_offset = current_offset + limit
    has_prev = current_offset > 0
    has_next = next_offset < total_records

    if has_prev:
        builder.button(text="‚¨ÖÔ∏è", callback_data=f"view_history:{prev_offset}")
    current_page_start = current_offset + 1
    current_page_end = min(current_offset + limit, total_records)
    builder.button(text=f"{current_page_start}-{current_page_end} –∏–∑ {total_records}", callback_data="ignore")

    if has_next:
        builder.button(text="‚û°Ô∏è", callback_data=f"view_history:{next_offset}")

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))

    return builder.as_markup()

def upload_confirm_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="confirm_upload"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def manage_configs_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="manage_source_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚úÖ True Tabs", callback_data="manage_tt_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return builder.as_markup()

def manage_source_configs_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_source_config")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="list_source_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_configs")
    )
    return builder.as_markup()

def manage_tt_configs_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_tt_config")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="list_tt_configs")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_configs")
    )
    return builder.as_markup()

def select_input_method_keyboard(config_type: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # callback_data —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç config_type –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–∞
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"select_input_method:manual:{config_type}")
    )
    builder.row(
        InlineKeyboardButton(text="üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é", callback_data=f"select_input_method:saved:{config_type}")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()


def select_config_keyboard(configs: List[Dict[str, Any]], callback_prefix: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not configs:
        builder.row(InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", callback_data="ignore"))
    else:
        for config in configs:
            text = config['name']
            if config.get('source_type'):
                 text += f" ({config['source_type']})"
            elif config.get('upload_datasheet_id'):
                 text += f" (Datasheet ID: {config['upload_datasheet_id']})"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if config.get('is_default'):
                 text += " ‚≠ê"

            builder.row(InlineKeyboardButton(text=text, callback_data=f"select_config:{callback_prefix}:{config['name']}"))

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return builder.as_markup()

def config_actions_keyboard(config: Dict[str, Any], config_type: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{config_type}_config:{config['name']}"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_type}_config_confirm:{config['name']}"))

    # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è
    if not config.get('is_default'):
        builder.row(InlineKeyboardButton(text="‚≠ê –°–¥–µ–ª–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data=f"set_default_{config_type}_config:{config['name']}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_{config_type}_configs"))
    return builder.as_markup()

def delete_confirm_keyboard(config_name: str, config_type: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"delete_{config_type}_config:{config_name}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{config_type}_actions:{config_name}")
    )
    return builder.as_markup()

def operation_in_progress_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="cancel_operation")
    )
    return builder.as_markup()